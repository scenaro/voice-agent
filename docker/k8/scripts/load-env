#!/bin/bash

# =============================================================================
# Script pour charger les variables d'environnement Kubernetes
# =============================================================================
#
# IMPORTANT: Ce script doit √™tre sourc√©, pas ex√©cut√© !
#
# Usage:
#   source ./load-env staging
#   . ./load-env prod
#
# Ce script charge les variables d'environnement depuis le fichier
# .env.k8s.<environment> correspondant et les exporte dans le shell courant.
#

# Note: on √©vite 'set -e' car quand sourc√©, cela pourrait fermer le shell parent

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction d'affichage des erreurs
error() {
    echo -e "${RED}Erreur: $1${NC}" >&2
}

# Fonction d'affichage des informations
info() {
    echo -e "${GREEN}$1${NC}"
}

# V√©rifier si le script est sourc√© (recommand√©) ou ex√©cut√©
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    error "Ce script doit √™tre sourc√©, pas ex√©cut√© !"
    echo "Usage: source $0 <environment>"
    echo "   ou: . $0 <environment>"
    echo "Exemple: source $0 staging"
    echo "         . $0 prod"
    return 1 2>/dev/null || exit 1
fi

# V√©rifier qu'un argument est fourni
if [ $# -eq 0 ]; then
    error "Aucun environnement sp√©cifi√©."
    echo "Usage: source $0 <environment>"
    echo "Exemple: source $0 staging"
    echo "         . $0 prod"
    return 1
fi

# R√©cup√©rer l'environnement demand√©
ENV="$1"

# D√©terminer le r√©pertoire du script et le r√©pertoire de configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="$SCRIPT_DIR/docker/k8/config"

# Construire le chemin du fichier .env.k8s
ENV_FILE="$CONFIG_DIR/.env.k8s.$ENV"

# V√©rifier que le fichier existe
if [ ! -f "$ENV_FILE" ]; then
    error "Le fichier de configuration '$ENV_FILE' n'existe pas."
    echo ""
    echo "Fichiers de configuration disponibles:"
    if ls "$CONFIG_DIR"/.env.k8s.* >/dev/null 2>&1; then
        ls -1 "$CONFIG_DIR"/.env.k8s.* | sed 's|.*/\.env\.k8s\.||' | sed 's/^/  - /'
    else
        echo "  Aucun fichier de configuration trouv√©."
    fi
    return 1
fi

# V√©rifier que le fichier est lisible
if [ ! -r "$ENV_FILE" ]; then
    error "Le fichier '$ENV_FILE' n'est pas lisible."
    return 1
fi

# Charger les variables d'environnement
info "üìÅ Chargement des variables d'environnement depuis: $ENV_FILE"

# Compter le nombre de variables √† charger (exclure commentaires et lignes vides)
VAR_COUNT=$(grep -c '^[^#]*=' "$ENV_FILE" 2>/dev/null || echo "0")

# Exporter les variables (m√™me m√©thode que check-env.sh)
export $(cat "$ENV_FILE" | grep -v "^#" | xargs) 2>/dev/null

info "‚úÖ Environnement '$ENV' charg√© avec succ√®s ($VAR_COUNT variables)."

# Afficher un r√©sum√© des variables principales (sans les valeurs pour la s√©curit√©)
if [ "$VAR_COUNT" -gt 0 ]; then
    echo ""
    echo "Variables principales charg√©es:"
    grep '^[^#]*=' "$ENV_FILE" | cut -d'=' -f1 | sed 's/^/  - /' | head -10
    if [ "$VAR_COUNT" -gt 10 ]; then
        echo "  ... et $((VAR_COUNT - 10)) autres variables"
    fi
fi

echo ""
info "üí° Variables export√©es dans le shell courant."
info "üîç V√©rifiez avec: env | grep -E \"K8_|SCW_|CLUSTER_|REGISTRY_\""
info "üìã Ou utilisez: ./check-env $ENV"